"use strict";

var username = 'stasokulov';
var linkToMyGit = "https://api.github.com/users/".concat(username);
var numRepos = '';
var reposPerPage = 10;
var pageForLoad = 1;
getRepos(pageForLoad);
goPagination();

function getRepos(pageForLoad) {
  var preloader = document.querySelector('.preloader__wrap_git');
  preloader.classList.remove('hidden');
  var linkToMyRepos = "".concat(linkToMyGit, "/repos?per_page=").concat(reposPerPage, "&page=").concat(pageForLoad);
  fetch(linkToMyRepos).then(function (response) {
    if (response.status === 200) {
      return response.json();
    } else {
      alert('Запрос на github.com не удался. Ошибка: ' + response.status);
    }
  }).then(function (arr) {
    arr.forEach(function (element) {
      gitItemCreator(element);
    });
  }).then(function () {
    preloader.classList.add('hidden');
  });
}

;
fetch(linkToMyGit).then(function (response) {
  if (response.status === 200) {
    return response.json();
  } else {
    alert('Запрос на github.com не удался. Ошибка: ' + response.status);
  }
}).then(function (json) {
  numRepos = json.public_repos;
  return numRepos;
}).then(function (numRepos) {
  var numPages = Math.ceil(numRepos / reposPerPage);

  for (var i = 1; i <= numPages; i++) {
    createPagination(i);
  }

  ;
});

function gitItemCreator(element) {
  var container = document.querySelector('.git__list');
  var item = createElement('li');
  item.classList.add('git__main__item');
  var link = createElement('a');
  link.classList.add('git__item-innerWrap');
  link.classList.add('link');
  link.href = element.html_url;
  link.target = 'blank';
  var title = createElement('p');
  title.classList.add('git__item-title');
  title.innerHTML = element.name;
  var string = createElement('p');
  string.classList.add('git__item-text');
  var marker = createElement('span');
  marker.classList.add('marker');

  switch (element.language) {
    case 'HTML':
      marker.classList.add('marker_HTML');
      break;

    case 'CSS':
      marker.classList.add('marker_CSS');
      break;

    case 'JS':
      marker.classList.add('marker_JS');
      break;
  }

  ;
  var progLang = createElement('span');
  progLang.classList.add('text-element');
  progLang.classList.add('text-element_progLang');
  progLang.innerHTML = element.language;
  var starWrap = createElement('span');
  starWrap.classList.add('text-element');
  var star = createElement('span');
  star.classList.add('text-element_star');
  var forkWrap = createElement('span');
  forkWrap.classList.add('text-element');
  var fork = createElement('span');
  fork.classList.add('text-element_fork');
  var dateUpdate = createElement('span');
  dateUpdate.classList.add('text-element');
  dateUpdate.classList.add('text-element_update');
  dateUpdate.innerHTML = 'Обновлено ' + new Date(element.updated_at).toLocaleDateString('ru') + 'г.';
  starWrap.appendChild(star);
  forkWrap.appendChild(fork);
  string.appendChild(marker);
  string.appendChild(progLang);
  string.appendChild(starWrap);
  string.appendChild(forkWrap);
  string.appendChild(dateUpdate);
  link.appendChild(title);
  link.appendChild(string);
  item.appendChild(link);

  if (element.stargazers_count) {
    starWrap.appendChild(document.createTextNode(element.stargazers_count));
  } else {
    starWrap.remove();
  }

  ;

  if (element.forks_count) {
    fork.appendChild(document.createTextNode(element.forks_count));
  } else {
    fork.remove();
  }

  ;
  container.appendChild(item);
}

;

function createPagination(pageCount) {
  var paginator = document.querySelector('.paginator');
  var paginationItem = document.querySelector('.paginator__item').cloneNode(true);
  paginationItem.classList.remove('hidden');

  if (pageCount === 1) {
    paginationItem.classList.add('paginator__item_active');
  }

  ;
  paginationItem.appendChild(document.createTextNode(pageCount));
  paginator.appendChild(paginationItem);
}

;

function goPagination() {
  var paginator = document.querySelector('.paginator');
  paginator.addEventListener('click', function (e) {
    if (e.target.className === 'paginator__item') {
      var allRepos = document.querySelectorAll('.git__main__item');
      allRepos = Array.from(allRepos);
      allRepos.forEach(function (element) {
        element.remove();
      });
      var page = e.target.innerText;
      getRepos(page);
      var paginationItems = document.querySelectorAll('.paginator__item');
      paginationItems = Array.from(paginationItems);
      paginationItems.forEach(function (element) {
        element.classList.remove('paginator__item_active');
      });
      e.target.classList.add('paginator__item_active');
    }

    ;
  });
}

;

function createElement(tag) {
  var element = document.createElement(tag);
  return element;
}

;
var burger = document.querySelector('.burger');
var burgerItem1 = document.querySelector('.burger__item-1');
var burgerItem2 = document.querySelector('.burger__item-2');
var mobileMenu = document.querySelector('.header__mobileMenu');
var main = document.querySelector('main');
var footer = document.querySelector('.footer__wrap');
burger.addEventListener('click', function () {
  burgerItem1.classList.toggle('burger__item-1_active');
  burgerItem2.classList.toggle('burger__item-2_active');
  mobileMenu.classList.toggle('hidden');
  main.classList.toggle('hidden');
  footer.classList.toggle('hidden');
});
var body = document.querySelector('body');
body.addEventListener('click', function (e) {
  if (e.target.classList.contains('scroll')) {
    var scroll = function scroll() {
      progress += lenghtStep;
      setTimeout(function () {
        window.scrollTo(0, progress);
        countStep++;

        if (countStep < numStep) {
          scroll();
        }

        ;
      }, 10);
    };

    burgerItem1.classList.remove('burger__item-1_active');
    burgerItem2.classList.remove('burger__item-2_active');
    mobileMenu.classList.add('hidden');
    main.classList.remove('hidden');
    footer.classList.remove('hidden');
    var targetClass = e.target.dataset.target;
    var aimBlock = document.querySelector('.' + targetClass);
    var finish = aimBlock.offsetTop;
    var start = window.pageYOffset;
    var numStep = 50;
    var lenghtStep = (finish - start) / numStep;
    var progress = start;
    var countStep = 0;
    scroll();
    ;
  }

  ;
});

window.onload = function () {
  var preloader = document.querySelector('.preloader__wrap_global');
  preloader.classList.add('hidden');
};

var viewAll = document.querySelectorAll('.recentWorks__title-side');
var hiddenWorks = document.querySelector('.recentWorks__example').querySelectorAll('.hidden');
viewAll = Array.from(viewAll);
viewAll.forEach(function (button) {
  button.addEventListener('click', function () {
    hiddenWorks.forEach(function (element) {
      element.classList.toggle('hidden');
    });
    viewAll.forEach(function (button) {
      button.classList.toggle('hidden');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
